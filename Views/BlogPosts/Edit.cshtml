@model Blog_MVC.Models.BlogPost
@using Blog_MVC.Services.Interfaces
@using Blog_MVC.Enums
@inject IImageService _ImageService
@inject IBlogPostService _blogPostService

@{
    ViewData["Title"] = "Edit";
    var tags = (await _blogPostService.GetTagsAsync()).OrderBy(t => t.BlogPosts.Count);
}

<div class="post-single-wrapper axil-section-gap ">
    <div class="container mt-5">
        <form asp-action="Edit" method="post" enctype="multipart/form-data">
            <h3 class="lightText">Edit @Model.Title</h3>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CreatorId" />
            <input type="hidden" asp-for="DateCreated" />
            <input type="hidden" asp-for="LastUpdated" />
            <input type="hidden" asp-for="ImageData" />
            <input type="hidden" asp-for="ImageType" />
            <input type="hidden" asp-for="Slug" />
            <div class="row">
                <div class="col-12 col-lg-4">
                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Abstract" class="control-label"></label>
                        <input asp-for="Abstract" class="form-control" />
                        <span asp-validation-for="Abstract" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="CategoryId" class="control-label"></label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                    <div class="form-group text-center">
                        <label asp-for="BlogPostImage" class="control-label"></label>
                        <img id="blogPostImage" class="img-fluid border rounded-3 m-2" style="max-height: 250px;" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!, Model.ImageType!, (int)DefaultImage.BlogPostImage)" />
                        <input asp-for="BlogPostImage" class="form-control" accept=".png,.jpg,.jpeg,.gif,.svg"
                               onchange="document.getElementById('blogPostImage').src= window.URL.createObjectURL(this.files[0])" />
                    </div>
                </div>
                <div class="col-12 col-lg-8">
                    <div class="form-group text-dark">
                        <label asp-for="Content" class="control-label"></label>
                        <textarea asp-for="Content" class="form-control editor"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Tags"></label>
                        <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
                        <div class="tagcloud axil-single-widget mt-2">
                            @foreach (Tag tag in tags)
                            {
                                <a onclick="addTag(this)">@tag.Name</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group d-flex justify-content-end mt-3">
                <a asp-action="Index" class="btn btn-primary rounded-pill align-self-center">Back to List</a>
                <div class="form-group form-check d-flex my-auto">
                    <label class="form-check-label my-auto me-4">
                        <input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
                    </label>
                </div>
                <input type="submit" value="Save" class="btn btn-primary" /> <br />
                
            </div>
        </form>
    </div>
</div>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'))
            .catch(error => {
                console.error(error);
            });
    </script>

    <script>
        $(document).ready(function () {
            jQuery.expr[':'].contains = function (a, i, m) {
                return $(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
            };

            $('#tagInput').focus(function () {
                $('.tagcloud').show(300);
            });

            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            $('#tagInput').keyup(function () {
                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                });

                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                $('.tagcloud > a:not(:contains(' + searchString + '))').hide();
                $('.tagcloud > a:contains(' + searchString + ')').show();

                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;
                    let containingTag = $('.tagCloud > a:contains(' + tag.trim() + ')')
                    if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase())
                        containingTag.addClass('disabledTag');
                });
            });
        });

        function addTag(ele) {
            let input = document.getElementById('tagInput');
            if (ele.classList.contains('disabledTag')) {
                input.focus();
                return;
            };

            let tagName = ele.textContent + ', ';
            let currentTags = input.value.split(',');

            currentTags.pop();

            currentTags.push(tagName);
            input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());
            input.focus();

            $('.tagcloud > a').show();
            ele.classList.add('disabledTag');
        };
    </script>
    }
