@model Blog_MVC.Models.BlogPost
@using Blog_MVC.Services.Interfaces
@using Blog_MVC.Enums
@inject IImageService _ImageService
@inject IBlogPostService _blogPostService

@{
    ViewData["Title"] = "Create";
    var tags = (await _blogPostService.GetTagsAsync()).OrderBy(t => t.BlogPosts.Count);
}

<div class="post-single-wrapper axil-section-gap bg-color-white">
    <main class="container mt-5">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row">
                <div class="col-12 col-lg-4">
                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Abstract" class="control-label"></label>
                        <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                        <span asp-validation-for="Abstract" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="CategoryId" class="control-label">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                    </div>
                    <div class="form-group">
                        <label asp-for="BlogPostImage" class="control-label">Blog Post Image</label>
                        <img class="img-fluid border rounded-3 m-2" style="max-height: 250px;" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!, Model.ImageType!, (int)DefaultImage.BlogPostImage)" id="blogImage">
                        <input asp-for="BlogPostImage" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                               onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                    </div>
                </div>
                <div class="col-12 col-lg-8">
                    <div class="form-group">
                        <label asp-for="Content" class="control-label"></label>
                        <textarea asp-for="Content" id="editor" class="form-control editor"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Tags"></label>
                        <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
                        <div class="tagcloud axil-single-widget mt-2">
                            @foreach (Tag tag in tags)
                            {
                                <a onclick="addTag(this)">@tag.Name</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group d-flex justify-content-end mt-3">
                <div class="form-group form-check d-flex my-auto">
                    <label class="form-check-label my-auto me-4">
                        <input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
                    </label>
                </div>
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
        <div class="mt-5">
            <a asp-action="Index">Back to List</a>
        </div>
    </main>
</div>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'))
            .catch(error => {
                console.error(error);
            });
    </script>

    @* use jQuery to implement selector override for : selector to normalize input
       tagcloud hidden on initial page load, shows when tagInput field in focus, hides tagcloud when focus lost
       implement search functionality in tagInput field to split by comma delimit, pop last entry and use as search string to show/hide tags *@
    <script>
        $(document).ready(function () {
            jQuery.expr[':'].contains = function (a, i, m) {
                return $(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
            };

            // show tagcloud on focus
            $('#tagInput').focus(function () {
                $('.tagcloud').show(300);
            });

            // hides tagcloud
            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            // searches tag cloud
            $('#tagInput').keyup(function () {
                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                });

                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                $('.tagcloud > a:not(:contains(' + searchString + '))').hide();
                $('.tagcloud > a:contains(' + searchString + ')').show();

                // hide existing tags
                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;
                    let containingTag = $('.tagCloud > a:contains(' + tag.trim() + ')')
                    if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase())
                        containingTag.addClass('disabledTag');
                });
            });
        });

        @* target ele for element selector
        reset tagcloud & allow adding of tags to input field on click
        replace typed input with selected tag & use if statement to prevent repeat tags*@
            function addTag(ele) {
                let input = document.getElementById('tagInput');
                if (ele.classList.contains('disabledTag')) {
                    input.focus();
                    return;
                };

                let tagName = ele.textContent + ', ';
                let currentTags = input.value.split(',');

                currentTags.pop();

                currentTags.push(tagName);
                input.value = currentTags.reduce((inputString, currentString) => inputString + ", " + currentString.trim());
                input.focus();

                //reset tagcloud
                $('.tagcloud > a').show();
                ele.classList.add('disabledTag');

        @* removes tag from view after use, but does not repopulate if deleted from tagInput
                ele.parentElement.removeChild(ele); *@
              };
    </script>
    }
